# -*- coding: utf-8 -*-
"""Limpieza_de_datos_extraccion_de_data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AcoerYgPBzfvlQ64KL4SsyFkgIlzDjuM
"""


import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/bus'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "bus"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_bus=datos_entrenamiento
datos_bus[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/articulated_truck'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "articulated_truck"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_articulated_truck=datos_entrenamiento
datos_articulated_truck[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/background'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "background"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_background=datos_entrenamiento
datos_background[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/bicycle'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "bicycle"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_bicycle=datos_entrenamiento
datos_bicycle[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/car'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 1000

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "car"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_car=datos_entrenamiento
datos_car[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/motorcycle'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "motorcycle"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_motorcycle=datos_entrenamiento
datos_motorcycle[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/non-motorized_vehicle'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "non_motorized_vehicle"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_non_motorized_vehicle=datos_entrenamiento
datos_non_motorized_vehicle[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/pedestrian'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "pedestrian"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_pedestrian=datos_entrenamiento
datos_pedestrian[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/pickup_truck'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "pickup_truck"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_pickup_truck=datos_entrenamiento
datos_pickup_truck[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/single_unit_truck'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "single_unit_truck"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

datos_single_unit_truck=datos_entrenamiento
datos_single_unit_truck[0]

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

carpeta_imagenes = 'train/work_van'  # Ruta de la carpeta que contiene las imágenes
datos_entrenamiento = []
TAMANO_IMG = 100
MAX_IMAGENES_POR_CARPETA = 500

# Obtener la lista de archivos en la carpeta
archivos = os.listdir(carpeta_imagenes)
num_archivos = len(archivos)

# Función para cargar y procesar una imagen
def cargar_y_procesar_imagen(archivo):
    ruta_imagen = os.path.join(carpeta_imagenes, archivo)

    # Leer la imagen con OpenCV
    imagen = cv2.imread(ruta_imagen)

    # Procesamiento de imagen
    imagen_redimensionada = cv2.resize(imagen, (TAMANO_IMG, TAMANO_IMG))
    imagen_redimensionada = cv2.cvtColor(imagen_redimensionada, cv2.COLOR_BGR2GRAY)
    imagen_redimensionada = imagen_redimensionada.reshape(TAMANO_IMG, TAMANO_IMG, 1)

    # Agregar la imagen redimensionada y su etiqueta a la lista datos_entrenamiento
    datos_entrenamiento.append([imagen_redimensionada, "work_van"])  # Reemplaza "etiqueta" con la etiqueta deseada

# Cargar y procesar imágenes en paralelo utilizando hilos
with ThreadPoolExecutor() as executor:
    executor.map(cargar_y_procesar_imagen, archivos[:MAX_IMAGENES_POR_CARPETA])

# Mostrar las primeras 5 imágenes
plt.figure(figsize=(20, 20))

for i in range(5):
    imagen = datos_entrenamiento[i][0]
    etiqueta = datos_entrenamiento[i][1]
    plt.subplot(1, 5, i+1)
    plt.imshow(imagen[:, :, 0], cmap='gray')
    plt.title(etiqueta)
    plt.axis('off')

plt.show()

print("Número de imágenes en datos_entrenamiento:", len(datos_entrenamiento))

datos_work_van=datos_entrenamiento
datos_work_van[0]

import numpy as np

# Apilar los datos de entrenamiento de todas las clases
datos_de_entrenamiento_todos = np.vstack((datos_articulated_truck, datos_background, datos_bicycle, datos_bus,
                                         datos_car, datos_motorcycle, datos_non_motorized_vehicle, datos_pedestrian,
                                         datos_pickup_truck, datos_single_unit_truck, datos_work_van))

# Imprimir el número de imágenes en datos_de_entrenamiento_todos
print("Número de imágenes en datos_de_entrenamiento_todos:", datos_de_entrenamiento_todos.shape[0])

datos_de_entrenamiento_todos[0][0].shape

print(datos_de_entrenamiento_todos[0])

elemento = datos_de_entrenamiento_todos[0]  # Reemplaza el índice 0 con el índice del elemento que deseas imprimir

# Imprimir el array NumPy
imagen = elemento[0]
print("Array NumPy:")
print(imagen)

# Imprimir la etiqueta
etiqueta = elemento[1]
print("Etiqueta:", etiqueta)

X=[]
y=[]
nuevas_etiquetas = {  # Diccionario para mapear las etiquetas originales a las nuevas etiquetas
    "articulated_truck": 0,
    "background": 1,
    "bicycle": 2,
    "bus": 3,
    "car": 4,
    "motorcycle": 5,
    "non_motorized_vehicle": 6,
    "pedestrian": 7,
    "pickup_truck": 8,
    "single_unit_truck": 9,
    "work_van": 10
}
for imagen,etiqueta in datos_de_entrenamiento_todos:
        X.append(imagen)
        y.append(nuevas_etiquetas[etiqueta])

import numpy as np
#Normalizacion
X=np.array(X).astype(float)/255

type(X)

import numpy as np

y= np.array(y)

type(y)

import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Input, Flatten, Dense, Conv2D
from tensorflow.keras.models import Model
from sklearn.model_selection import train_test_split
import numpy as np

# Parámetros
TAMANO_IMG = 100
NUM_CLASES = 11
NUM_IMAGENES = 6000

# Generar datos de ejemplo (asegúrate de que X e y estén correctamente definidos)
input_data = X
labels = y

# Asegurarse de que las imágenes sean de tipo float32
input_data = input_data.astype(np.float32)

# Normalizar los datos
input_data = input_data / 255.0

# Cambiar la forma de las imágenes a (TAMANO_IMG, TAMANO_IMG, 3)
input_data = np.repeat(input_data[..., np.newaxis], 3, -1)

# Separar los datos en conjuntos de entrenamiento y prueba
x_train, x_test, y_train, y_test = train_test_split(input_data, labels, test_size=0.2, random_state=42)

# Configurar el uso de la GPU
physical_devices = tf.config.list_physical_devices('GPU')
tf.config.experimental.set_memory_growth(physical_devices[0], True)

# Modificar el modelo ResNet-50 para aceptar imágenes en escala de grises
input_tensor = Input(shape=(TAMANO_IMG, TAMANO_IMG, 1))
x = Conv2D(3, (1, 1))(input_tensor)
base_model = ResNet50(include_top=False, weights=None, input_tensor=x)

# Agregar capas adicionales para la clasificación
x = base_model.output
x = Flatten()(x)
x = Dense(1024, activation='relu')(x)
predictions = Dense(NUM_CLASES, activation='softmax')(x)

# Crear el modelo completo
model = Model(inputs=input_tensor, outputs=predictions)

# Compilar el modelo
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Entrenar el modelo utilizando la GPU
with tf.device('/GPU:0'):
    model.fit(x_train, y_train, epochs=10, batch_size=32, validation_split=0.2)

# Evaluar el modelo en el conjunto de prueba utilizando la GPU
with tf.device('/GPU:0'):
    test_loss, test_accuracy = model.evaluate(x_test, y_test)

print('Precisión en el conjunto de prueba:', test_accuracy)
